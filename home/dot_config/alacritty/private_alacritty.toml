window.opacity = 1.0
# Required to work along Zellij in MacOs
window.option_as_alt = "Both"

[bell]
animation = "EaseOutExpo"
duration = 0

[colors]
draw_bold_text_with_bright_colors = true

[debug]
render_timer = false

[env]
TERM = "xterm-256color"

[font]
size = 15.0

[font.normal]
family = "MesloLGS NF"

[font.italic]
family = "MesloLGS NF"

[font.bold]
family = "MesloLGS NF"

[[mouse.bindings]]
action = "PasteSelection"
mouse = "Middle"

[selection]
save_to_clipboard     = true
semantic_escape_chars = ",│`|:\"' ()[]{}<>"

[scrolling]
history    = 10000
multiplier = 4

[[hints.enabled]]
command = "xdg-open"
hyperlinks = true
post_processing = true
regex = "(ipfs:|ipns:|magnet:|mailto:|gemini:|gopher:|https:|http:|news:|file:|git:|ssh:|ftp:)[^\u0000-\u001F\u007F-<>\"\\s{-}\\^⟨⟩`]+"

[hints.enabled.binding]
key = "U"
mods = "Control|Shift"

[hints.enabled.mouse]
enabled = true
mods = "None"

# Key bindings
#
# Each binding is defined as an object with some properties. Most of the
# properties are optional. All of the alphabetical keys should have a letter for
# the `key` value such as `V`. Function keys are probably what you would expect
# as well (F1, F2, ..). The number keys above the main keyboard are encoded as
# `Key1`, `Key2`, etc. Keys on the number pad are encoded `Number1`, `Number2`,
# etc.  These all match the glutin::VirtualKeyCode variants.
#
# A list with all available `key` names can be found here:
# https://docs.rs/glutin/*/glutin/enum.VirtualKeyCode.html#variants
#
# Possible values for `mods`
# `Command`, `Super` refer to the super/command/windows key
# `Control` for the control key
# `Shift` for the Shift key
# `Alt` and `Option` refer to alt/option
#
# mods may be combined with a `|`. For example, requiring control and shift
# looks like:
#
# mods: Control|Shift
#
# The parser is currently quite sensitive to whitespace and capitalization -
# capitalization must match exactly, and piped items must not have whitespace
# around them.
#
# Either an `action`, `chars`, or `command` field must be present.
#   `action` must be one of `Paste`, `PasteSelection`, `Copy`, or `Quit`.
#   `chars` writes the specified string every time that binding is activated.
#     These should generally be escape sequences, but they can be configured to
#     send arbitrary strings of bytes.
#   `command` must be a map containing a `program` string, and `args` array of
#     strings. For example:
#     - { ... , command: { program: "alacritty", args: ["-e", "vttest"] } }

[[keyboard.bindings]]
action = "SpawnNewInstance"
key = "N"
mods = "Control"

[[keyboard.bindings]]
action = "ToggleViMode"
key = "Space"
mode = "~Search"
mods = "Shift|Alt"

[[keyboard.bindings]]
action = "ScrollPageUp"
key = "PageUp"
mods = "Shift"

[[keyboard.bindings]]
action = "ScrollPageDown"
key = "PageDown"
mods = "Shift"

[[keyboard.bindings]]
action = "ScrollToBottom"
key = "End"
mods = "Shift"

[[keyboard.bindings]]
action = "ScrollToTop"
key = "Home"
mods = "Shift"

[[keyboard.bindings]]
action = "ClearHistory"
key = "K"
mods = "Command"

[[keyboard.bindings]]
chars = "\f"
key = "K"
mods = "Command"

[general]

live_config_reload = true
import = [
    "~/.config/alacritty/catppuccin-macchiato.toml"
]
